{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPB1jt9zkqrdrvcx+7XMaE6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/fabiobaroliveira/analise_exploratoria_de_dados/blob/main/extracao_fiat_2025\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "HTCHlJU3is0X"
      },
      "outputs": [],
      "source": [
        "# Importando todas bibliotecas necessárias\n",
        "\n",
        "import requests\n",
        "import zipfile\n",
        "import io\n",
        "import os\n",
        "import pandas as pd\n",
        "from pathlib import Path\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from tqdm import tqdm"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Carregando arquivo direto do site\n",
        "\n",
        "# URL do arquivo .zip\n",
        "url = 'https://dados.transportes.gov.br/dataset/12686da0-3d71-4499-b432-d270f785c907/resource/ee0d392c-c467-4002-884d-e89bd1f989f1/download/i_frota_por_uf_municipio_marca_e_modelo_ano_abril_2025.zip'\n",
        "\n",
        "# Faz o download do arquivo com barra de progresso\n",
        "print(\"Iniciando download do arquivo...\")\n",
        "response = requests.get(url, stream=True)  # stream=True para download em partes\n",
        "\n",
        "# Verifica se o download foi bem-sucedido\n",
        "if response.status_code == 200:\n",
        "    # Obtém o tamanho total do arquivo (em bytes)\n",
        "    total_size = int(response.headers.get('content-length', 0))\n",
        "    block_size = 1024  # 1 Kibibyte\n",
        "\n",
        "    # Cria um buffer para armazenar o conteúdo\n",
        "    file_buffer = io.BytesIO()\n",
        "\n",
        "    # Barra de progresso para o download\n",
        "    with tqdm(total=total_size, unit='iB', unit_scale=True, desc=\"Download\") as pbar:\n",
        "        for data in response.iter_content(block_size):\n",
        "            file_buffer.write(data)\n",
        "            pbar.update(len(data))  # Atualiza a barra de progresso\n",
        "\n",
        "    print(\"\\nDownload concluído com sucesso!\")\n",
        "\n",
        "    # Prepara para extrair o arquivo\n",
        "    file_buffer.seek(0)  # Volta ao início do buffer\n",
        "\n",
        "    # Extrai o conteúdo do arquivo .zip com barra de progresso\n",
        "    print(\"\\nExtraindo arquivos...\")\n",
        "    with zipfile.ZipFile(file_buffer) as zip_file:\n",
        "        # Obtém lista de arquivos para extração\n",
        "        file_list = zip_file.infolist()\n",
        "\n",
        "        # Barra de progresso para extração\n",
        "        for file in tqdm(file_list, desc=\"Extraindo\"):\n",
        "            zip_file.extract(file, 'dados_extraidos')\n",
        "\n",
        "    print(\"Extração concluída com sucesso!\")\n",
        "\n",
        "    # Renomeia o arquivo\n",
        "    caminho_original = os.path.join('dados_extraidos', 'Layout I.TXT')\n",
        "    novo_nome = os.path.join('dados_extraidos', 'base_de_dados.txt')\n",
        "\n",
        "    if os.path.exists(caminho_original):\n",
        "        os.rename(caminho_original, novo_nome)\n",
        "        print(f\"Arquivo renomeado para: {novo_nome}\")\n",
        "    else:\n",
        "        print(\"Arquivo original não encontrado.\")\n",
        "else:\n",
        "    print(f\"Erro ao baixar o arquivo: {response.status_code}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sTtXa0rfjAtu",
        "outputId": "2759033b-0d27-4a9e-eba5-792654b57cab"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iniciando download do arquivo...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Download: 100%|██████████| 128M/128M [02:12<00:00, 971kiB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Download concluído com sucesso!\n",
            "\n",
            "Extraindo arquivos...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Extraindo: 100%|██████████| 1/1 [00:13<00:00, 13.30s/it]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extração concluída com sucesso!\n",
            "Arquivo original não encontrado.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Abre o arquivo no modo de leitura\n",
        "with open(\"dados_extraidos/base_de_dados.txt\",\"r\", encoding=\"utf-8\") as arquivo:\n",
        "    # Lê as 10 primeiras linhas\n",
        "    for i in range(10):\n",
        "        linha = arquivo.readline()\n",
        "        # Exibe a linha atual\n",
        "        print(linha.strip())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k6lS4wC2klfv",
        "outputId": "fbf33760-3a27-4f82-d8b1-6db6810e1701"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "UF;Município;Marca Modelo;Ano Fabricação Veículo CRV;Qtd. Veículos\n",
            "ACRE;ACRELANDIA;AGRALE/13000;2009; 1.0\n",
            "ACRE;ACRELANDIA;AGRALE/1800;1989; 1.0\n",
            "ACRE;ACRELANDIA;AGRALE/1800;1990; 1.0\n",
            "ACRE;ACRELANDIA;AGRALE/1800D RD;1989; 1.0\n",
            "ACRE;ACRELANDIA;AGRALE/1800D RD;1990; 2.0\n",
            "ACRE;ACRELANDIA;AGRALE/1800D RD;1993; 1.0\n",
            "ACRE;ACRELANDIA;AGRALE/6000 D;2005; 1.0\n",
            "ACRE;ACRELANDIA;AGRALE/6000 D;2008; 1.0\n",
            "ACRE;ACRELANDIA;AGRALE/6000 D;2010; 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Abra o arquivo no modo de leitura\n",
        "with open('dados_extraidos/base_de_dados.txt', 'r', encoding='utf-8') as arquivo:\n",
        "    linhas = arquivo.readlines()  # Lê todas as linhas\n",
        "\n",
        "# Filtrar as linhas que contêm \"FIAT\"\n",
        "linhas_filtradas = [linha for linha in linhas if \"FIAT\" in linha]\n",
        "linhas_filtradas = [linha for linha in linhas_filtradas if \"2025\" in linha]\n",
        "\n",
        "# Caminho para o novo arquivo\n",
        "novo_arquivo_path = \"fiat_abril_2025.csv\"\n",
        "\n",
        "# Salvar as linhas filtradas em um novo arquivo\n",
        "with open(novo_arquivo_path, 'w', encoding='utf-8') as novo_arquivo:\n",
        "    novo_arquivo.writelines(linhas_filtradas)\n",
        "\n",
        "print(f\"O arquivo com os veículos FIAT foi salvo em: {novo_arquivo_path}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YyerZz2lkJ8J",
        "outputId": "2e40881d-1dba-4cca-9d67-06e7836e539d"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "O arquivo com os veículos FIAT foi salvo em: fiat_abril_2025.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "display(pd.read_csv(\"fiat_abril_2025.csv\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "EBEV5rdyk7d3",
        "outputId": "292f84b5-f243-4d7d-c4f1-06ba1d6b0f76"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           ACRE;ACRELANDIA;FIAT/ARGO DRIVE 1.0;2025; 1.0\n",
              "0      ACRE;ACRELANDIA;FIAT/STRADA ULTRA T200AT;2025;...\n",
              "1      ACRE;ACRELANDIA;FIAT/STRADA VOLCANO 13AT;2025;...\n",
              "2      ACRE;ACRELANDIA;FIAT/STRADA VOLCANO CD13;2025;...\n",
              "3      ACRE;ASSIS BRASIL;FIAT/STRADA VOLCANO CD13;202...\n",
              "4           ACRE;BRASILEIA;FIAT/ARGO DRIVE 1.0;2025; 1.0\n",
              "...                                                  ...\n",
              "21868  TOCANTINS;TUPIRAMA;FIAT/TORO VOLC T270 AT;2025...\n",
              "21869  TOCANTINS;WANDERLANDIA;FIAT/PULSE DRIVE AT;202...\n",
              "21870  TOCANTINS;XAMBIOA;FIAT/STRADA RANCH T200AT;202...\n",
              "21871  TOCANTINS;XAMBIOA;FIAT/STRADA VOLCANO 13AT;202...\n",
              "21872  TOCANTINS;XAMBIOA;FIAT/STRADA VOLCANO CD13;202...\n",
              "\n",
              "[21873 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c0383390-6a9d-46d8-891c-01af6e654c99\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ACRE;ACRELANDIA;FIAT/ARGO DRIVE 1.0;2025; 1.0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ACRE;ACRELANDIA;FIAT/STRADA ULTRA T200AT;2025;...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ACRE;ACRELANDIA;FIAT/STRADA VOLCANO 13AT;2025;...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ACRE;ACRELANDIA;FIAT/STRADA VOLCANO CD13;2025;...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ACRE;ASSIS BRASIL;FIAT/STRADA VOLCANO CD13;202...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ACRE;BRASILEIA;FIAT/ARGO DRIVE 1.0;2025; 1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21868</th>\n",
              "      <td>TOCANTINS;TUPIRAMA;FIAT/TORO VOLC T270 AT;2025...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21869</th>\n",
              "      <td>TOCANTINS;WANDERLANDIA;FIAT/PULSE DRIVE AT;202...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21870</th>\n",
              "      <td>TOCANTINS;XAMBIOA;FIAT/STRADA RANCH T200AT;202...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21871</th>\n",
              "      <td>TOCANTINS;XAMBIOA;FIAT/STRADA VOLCANO 13AT;202...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21872</th>\n",
              "      <td>TOCANTINS;XAMBIOA;FIAT/STRADA VOLCANO CD13;202...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21873 rows × 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0383390-6a9d-46d8-891c-01af6e654c99')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c0383390-6a9d-46d8-891c-01af6e654c99 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c0383390-6a9d-46d8-891c-01af6e654c99');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f6e18117-153e-4198-9bc5-e52c62b037cc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f6e18117-153e-4198-9bc5-e52c62b037cc')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f6e18117-153e-4198-9bc5-e52c62b037cc button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(pd\",\n  \"rows\": 21873,\n  \"fields\": [\n    {\n      \"column\": \"ACRE;ACRELANDIA;FIAT/ARGO DRIVE 1.0;2025; 1.0\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 21873,\n        \"samples\": [\n          \"ESPIRITO SANTO;SANTA MARIA DE JETIBA;FIAT/MOBI LIKE;2025; 2.0\",\n          \"MINAS GERAIS;PRADOS;FIAT/ARGO TREKKING 1.3AT;2025; 1.0\",\n          \"MINAS GERAIS;ITABIRA;FIAT/ARGO TREKKING 1.3AT;2025; 5.0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    }
  ]
}